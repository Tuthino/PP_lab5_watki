/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab5;

import lab5.models.Map;
import lab5.models.Task;
import java.util.ArrayList;
import java.util.concurrent.CyclicBarrier;

public class App {
    public static Map mainMap;

    public static void main(String[] args) {
        // String filePath = args[0];
        int num_of_iterations;

        int threadsNum = 8;

        String filePath = "/home/reyio/Programming/PWR/Programowanie/lab5/app/src/main/resources/input";
        InputParser parser = new InputParser(filePath);
        mainMap = parser.loadMap();
        num_of_iterations = parser.getNum_of_iterations();
        mainMap.printMap();

        runSimulation(mainMap, num_of_iterations, threadsNum);
    }

    private static void runSimulation(Map currentMap, int num_of_iterations, int threadsNum) {
        int width = currentMap.getWidth();
        int height = currentMap.getHeight();

        for (int iteration = 0; iteration < num_of_iterations; iteration++) {

            CyclicBarrier barrier = new CyclicBarrier(threadsNum, new Runnable() {
                @Override
                public void run() {
                    mainMap.printMap();

                }
            });

            runThreads(currentMap, threadsNum, width, height, barrier);
        }

    }

    private static void runThreads(Map currentMap, int threadsNum, int width, int height, CyclicBarrier barrier) {
        ArrayList<Thread> threads = new ArrayList<>();
        ArrayList<Task> tasks = new ArrayList<>();
        for (int i = 0; i < threadsNum; i++) {
            int offset = i * (width / threadsNum);
            int end = (i + 1) * (width / threadsNum);
            if (i == threadsNum - 1) {
                end = width;
            }
            Map threadMap = new Map(currentMap);
            Task task = new Task(i, offset, end, height, threadMap, barrier);
            Thread thread = new Thread(task);
            thread.start();
            threads.add(thread);
            tasks.add(task);

        }
        for (Thread thread : threads) {
            try {
                thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        for (Task task : tasks) {
            System.out.println("tid " + task.getThreadId() + ": rows: " + task.getOffset() + ":" + task.getWidth()
                    + " (" + (task.getWidth() - task.getOffset()) + ") cols: 0:" + task.getHeight() + " ("
                    + task.getHeight() + ")");
        }
    }
}
